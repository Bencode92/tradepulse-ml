# Configuration pre-commit pour TradePulse ML
# ==========================================
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Usage:
#   pre-commit run --all-files  # Tester sur tous les fichiers
#   git commit                  # Pre-commit s'ex√©cute automatiquement

repos:
  # Hooks g√©n√©raux pour la qualit√© du code
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # S√©curit√© et syntaxe
      - id: check-yaml
        name: üîç V√©rifier syntaxe YAML
      - id: check-json
        name: üîç V√©rifier syntaxe JSON
      - id: check-toml
        name: üîç V√©rifier syntaxe TOML
      - id: check-merge-conflict
        name: üîç D√©tecter marqueurs de merge conflict
      - id: check-added-large-files
        name: üîç Bloquer fichiers volumineux (>500KB)
        args: ['--maxkb=500']
      
      # Formatage
      - id: trailing-whitespace
        name: üßπ Supprimer espaces en fin de ligne
        exclude: '\.md$'
      - id: end-of-file-fixer
        name: üßπ Assurer nouvelle ligne en fin de fichier
      - id: mixed-line-ending
        name: üßπ Normaliser fins de ligne
        args: ['--fix=lf']
      
      # Python sp√©cifique
      - id: check-ast
        name: üêç V√©rifier syntaxe Python (AST)
      - id: check-docstring-first
        name: üêç V√©rifier docstrings en d√©but de fonction
      - id: debug-statements
        name: üêç D√©tecter instructions de debug oubli√©es

  # Formatage Python avec Black
  - repo: https://github.com/psf/black
    rev: '23.12.1'
    hooks:
      - id: black
        name: üñ§ Formater code Python (Black)
        language_version: python3
        args: 
          - '--line-length=88'
          - '--target-version=py39'

  # Tri des imports avec isort
  - repo: https://github.com/pycqa/isort
    rev: '5.13.2'
    hooks:
      - id: isort
        name: üì¶ Trier imports Python (isort)
        args:
          - '--profile=black'
          - '--line-length=88'
          - '--multi-line=3'
          - '--trailing-comma'

  # Linting Python avec Ruff (plus rapide que flake8)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: 'v0.1.8'
    hooks:
      - id: ruff
        name: ‚ö° Analyser code Python (Ruff)
        args: 
          - '--fix'
          - '--exit-non-zero-on-fix'

  # V√©rification des requirements Python
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: forbid-crlf
        name: üö´ Interdire CRLF (Windows line endings)
      - id: remove-crlf
        name: üßπ Supprimer CRLF automatiquement

  # Hooks sp√©cifiques TradePulse ML
  - repo: local
    hooks:
      # Test de validation des datasets
      - id: test-dataset-validation
        name: üß™ Tester script de validation datasets
        entry: python scripts/test_validation.py
        language: python
        files: '^scripts/validate_dataset\.py$'
        pass_filenames: false
        
      # Validation automatique des nouveaux datasets
      - id: validate-new-datasets
        name: üîç Valider nouveaux datasets
        entry: bash -c 'for file in "$@"; do echo "Validating $file..."; python scripts/validate_dataset.py "$file" || exit 1; done' --
        language: system
        files: '^datasets/.*\.(csv|json)$'
        
      # V√©rifier la structure des datasets
      - id: check-dataset-structure
        name: üìä V√©rifier structure dossier datasets
        entry: bash -c '
          if [ ! -d "datasets" ]; then
            echo "‚ùå Dossier datasets/ manquant";
            exit 1;
          fi;
          if [ -z "$(find datasets/ -name "*.csv" -o -name "*.json" 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è Aucun dataset trouv√© dans datasets/";
          fi;
          echo "‚úÖ Structure datasets OK";'
        language: system
        files: '^datasets/'
        pass_filenames: false
        
      # V√©rifier les secrets et tokens
      - id: check-secrets
        name: üîê D√©tecter tokens/secrets potentiels
        entry: bash -c '
          if grep -r -E "(api_key|secret|token|password)\s*=\s*[\"'"'"'][^\"'"'"']+[\"'"'"']" --include="*.py" --include="*.yml" --include="*.yaml" .; then
            echo "‚ùå Tokens/secrets potentiels d√©tect√©s dans le code";
            echo "üí° Utilisez des variables d'"'"'environnement ou GitHub Secrets";
            exit 1;
          fi'
        language: system
        pass_filenames: false
        
      # V√©rifier la taille des mod√®les
      - id: check-model-size
        name: üìè V√©rifier taille des mod√®les
        entry: bash -c '
          for file in "$@"; do
            size=$(du -k "$file" | cut -f1);
            if [ $size -gt 51200 ]; then  # 50MB
              echo "‚ùå Mod√®le trop volumineux: $file (${size}KB > 50MB)";
              echo "üí° Utilisez Git LFS ou stockage externe";
              exit 1;
            fi;
          done'
        language: system
        files: '^models/.*\.(bin|pt|pth|safetensors)$'

# Configuration globale
default_stages: [commit]
minimum_pre_commit_version: '3.0.0'

# Exclusions globales
exclude: |
  (?x)
  # Fichiers g√©n√©r√©s automatiquement
  ^\.venv/|
  ^venv/|
  ^\.env/|
  ^__pycache__/|
  .*\.pyc$|
  
  # Artifacts et logs
  ^models/.*\.bin$|
  ^models/.*\.safetensors$|
  .*\.log$|
  ^finetune\.log$|
  
  # Fichiers de validation temporaires
  ^validation_.*\.json$|
  ^validation_errors\.txt$|
  
  # Datasets de test temporaires
  ^test_.*\.csv$

# Messages personnalis√©s
fail_fast: false  # Continuer m√™me si un hook √©choue
