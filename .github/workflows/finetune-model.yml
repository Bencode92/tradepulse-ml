name: 🤖 TradePulse FinBERT - Modèle Unique Incrémental

# 🔐 PERMISSIONS REQUISES POUR RELEASES
permissions:
  contents: write      # Pour créer des releases et tags
  actions: read        # Pour lire les workflows
  issues: write        # Pour commenter sur les issues/PRs
  pull-requests: write # Pour commenter sur les PRs

on:
  # Déclenchement manuel avec paramètres
  workflow_dispatch:
    inputs:
      dataset:
        description: 'Dataset filename (in datasets/ folder)'
        required: true
        default: 'auto-latest'
        type: string
      
      mode:
        description: 'Training mode'
        required: true
        default: 'incremental'
        type: choice
        options:
          - 'incremental'      # Améliore le modèle existant (RECOMMANDÉ)
          - 'fresh'            # Repart du modèle de base
          - 'test'             # Test local seulement
      
      epochs:
        description: 'Number of training epochs'
        required: true
        default: '3'
        type: string
      
      learning_rate:
        description: 'Learning rate'
        required: true
        default: '2e-5'
        type: string
      
      force_update:
        description: 'Force update even without improvement'
        required: false
        default: false
        type: boolean

  # Déclenchement sur push dans datasets/ (après validation quality gate)
  push:
    paths:
      - 'datasets/**.csv'
      - 'datasets/**.json'
      - 'scripts/finetune.py'
      
  # Déclenchement après succès du Quality Gate (pour PRs)
  workflow_run:
    workflows: ["🔍 Dataset Quality Gate"]
    types:
      - completed
    branches: [main]

env:
  # 🎯 MODÈLE FIXE - Plus de noms aléatoires !
  PRODUCTION_MODEL: "Bencode92/tradepulse-finbert-prod"
  DEVELOPMENT_MODEL: "Bencode92/tradepulse-finbert-dev"
  FALLBACK_MODEL: "yiyanghkust/finbert-tone"

jobs:
  # Job de vérification des prérequis
  check-prerequisites:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      trigger-reason: ${{ steps.check.outputs.trigger-reason }}
      dataset-changed: ${{ steps.check.outputs.dataset-changed }}
      training-mode: ${{ steps.check.outputs.training-mode }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Pour comparer avec le commit précédent
    
    - name: 🔍 Check Prerequisites & Determine Mode
      id: check
      run: |
        set -euo pipefail
        
        SHOULD_RUN=false
        TRIGGER_REASON=""
        DATASET_CHANGED=false
        TRAINING_MODE="incremental"  # Mode par défaut
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          SHOULD_RUN=true
          TRIGGER_REASON="Manual trigger"
          TRAINING_MODE="${{ github.event.inputs.mode }}"
          
          echo "🎯 Manual mode selected: $TRAINING_MODE"
          
        elif [ "${{ github.event_name }}" = "push" ]; then
          # Vérifier si des datasets ont changé
          if git diff --name-only HEAD~1 HEAD | grep -E '^datasets/.*\.(csv|json)$'; then
            SHOULD_RUN=true
            TRIGGER_REASON="Dataset files modified"
            DATASET_CHANGED=true
            TRAINING_MODE="incremental"  # Auto = toujours incrémental
          elif git diff --name-only HEAD~1 HEAD | grep '^scripts/finetune.py$'; then
            SHOULD_RUN=true
            TRIGGER_REASON="Fine-tuning script modified"
            TRAINING_MODE="incremental"
          fi
          
        elif [ "${{ github.event_name }}" = "workflow_run" ]; then
          # Vérifier si le Quality Gate a réussi
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            SHOULD_RUN=true
            TRIGGER_REASON="Quality Gate passed"
            DATASET_CHANGED=true
            TRAINING_MODE="incremental"
          else
            echo "⚠️ Quality Gate failed, skipping fine-tuning"
          fi
        fi
        
        echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
        echo "trigger-reason=$TRIGGER_REASON" >> $GITHUB_OUTPUT  
        echo "dataset-changed=$DATASET_CHANGED" >> $GITHUB_OUTPUT
        echo "training-mode=$TRAINING_MODE" >> $GITHUB_OUTPUT
        
        echo "🔍 Prerequisites check:"
        echo "  Should run: $SHOULD_RUN"
        echo "  Reason: $TRIGGER_REASON"
        echo "  Dataset changed: $DATASET_CHANGED"
        echo "  Training mode: $TRAINING_MODE"

  finetune:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 heures max
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should-run == 'true'
    
    outputs:
      model-path: ${{ steps.training.outputs.model-path }}
      final-model-id: ${{ steps.training.outputs.final-model-id }}
      training-metrics: ${{ steps.training.outputs.training-metrics }}
      model-updated: ${{ steps.training.outputs.model-updated }}

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Setup Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: 🔧 Smart Configuration for Fixed Model
      id: config
      run: |
        set -euo pipefail
        
        # Déterminer le modèle cible selon le mode
        TRAINING_MODE="${{ needs.check-prerequisites.outputs.training-mode }}"
        
        if [ "$TRAINING_MODE" = "test" ]; then
          TARGET_MODEL="test-model"
          PUSH_TO_HUB="false"
          echo "🧪 Mode test - pas de push vers HuggingFace"
        elif [ "$TRAINING_MODE" = "incremental" ]; then
          TARGET_MODEL="$PRODUCTION_MODEL"
          PUSH_TO_HUB="true"
          echo "🔄 Mode incrémental - amélioration du modèle de production"
        elif [ "$TRAINING_MODE" = "fresh" ]; then
          TARGET_MODEL="$PRODUCTION_MODEL"
          PUSH_TO_HUB="true"
          echo "🆕 Mode fresh - repartir du modèle de base"
        else
          echo "❌ Mode de training inconnu: $TRAINING_MODE"
          exit 1
        fi
        
        # Déterminer le dataset
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          MANUAL_DATASET="${{ github.event.inputs.dataset }}"
          
          if [ "$MANUAL_DATASET" = "auto-latest" ]; then
            echo "🔍 Auto-selecting latest dataset..."
            LATEST_CSV=$(find datasets/ -name "*.csv" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- | xargs basename)
            if [ -z "$LATEST_CSV" ]; then
              echo "❌ No CSV files found in datasets/"
              exit 1
            fi
            DATASET="$LATEST_CSV"
            echo "📊 Auto-selected dataset: $LATEST_CSV"
          else
            DATASET="$MANUAL_DATASET"
            echo "📊 Manual dataset: $MANUAL_DATASET"
          fi
          
          EPOCHS="${{ github.event.inputs.epochs }}"
          LEARNING_RATE="${{ github.event.inputs.learning_rate }}"
          FORCE_UPDATE="${{ github.event.inputs.force_update }}"
        else
          # Auto-trigger: sélectionner le dernier dataset modifié
          echo "🔄 Auto-trigger mode: selecting latest dataset..."
          
          DATASET_FILE=$(find datasets/ -name "*.csv" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- | xargs basename)
          if [ -z "$DATASET_FILE" ]; then
            echo "❌ No suitable dataset found"
            exit 1
          fi
          
          DATASET="$DATASET_FILE"
          EPOCHS="3"
          LEARNING_RATE="2e-5"
          FORCE_UPDATE="false"
        fi
        
        # Export des variables
        {
          echo "DATASET=$DATASET"
          echo "TARGET_MODEL=$TARGET_MODEL"
          echo "PUSH_TO_HUB=$PUSH_TO_HUB"
          echo "EPOCHS=$EPOCHS"
          echo "LEARNING_RATE=$LEARNING_RATE"
          echo "FORCE_UPDATE=$FORCE_UPDATE"
          echo "TRAINING_MODE=$TRAINING_MODE"
        } >> "$GITHUB_ENV"
        
        echo ""
        echo "🔧 Configuration finale pour modèle fixe:"
        echo "  Trigger: ${{ github.event_name }} (${{ needs.check-prerequisites.outputs.trigger-reason }})"
        echo "  Dataset: $DATASET"
        echo "  Target Model: $TARGET_MODEL"
        echo "  Training Mode: $TRAINING_MODE"
        echo "  Push to Hub: $PUSH_TO_HUB"
        echo "  Epochs: $EPOCHS"
        echo "  Learning Rate: $LEARNING_RATE"
        echo "  Force Update: $FORCE_UPDATE"

    - name: 📦 Install Dependencies
      run: |
        set -euo pipefail
        
        python -m pip install --upgrade pip
        pip cache purge
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install "transformers[torch]==4.41.0" datasets==2.19.1 accelerate==0.30.1 evaluate==0.4.2
        pip install scikit-learn==1.4.2 pandas==2.2.2 numpy==1.26.4
        pip install huggingface_hub==0.23.0 tensorboard==2.16.2
        
        if [ -f requirements.txt ]; then
          echo "📋 Installing additional requirements..."
          pip install -r requirements.txt
        fi
        
        # Vérifications de version
        python - <<'PY'
        import transformers, torch, datasets
        print(f"✅ Transformers: {transformers.__version__}")
        print(f"✅ PyTorch: {torch.__version__}")
        print(f"✅ Datasets: {datasets.__version__}")
        PY

    - name: 🔐 Setup HuggingFace Token
      if: env.PUSH_TO_HUB == 'true'
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        set -euo pipefail
        
        if [ -z "$HF_TOKEN" ]; then
          echo "❌ HF_TOKEN required for model updates"
          echo "💡 Add HF_TOKEN to repository secrets in Settings > Secrets"
          exit 1
        fi
        
        huggingface-cli login --token "$HF_TOKEN"
        echo "✅ HuggingFace authentication successful"
        
        # Vérification de l'authentification
        huggingface-cli whoami

    - name: 🔍 Validate Dataset Quality
      run: |
        set -euo pipefail
        
        DATASET_FILE="datasets/$DATASET"
        echo "🧪 Validating dataset quality: $DATASET_FILE"
        
        if [ ! -f "$DATASET_FILE" ]; then
          echo "❌ Dataset file not found: $DATASET_FILE"
          exit 1
        fi
        
        echo "✅ Dataset file found: $DATASET_FILE"
        echo "📊 File size: $(du -h "$DATASET_FILE" | cut -f1)"
        
        # Validation avec le script existant
        if [ -f "scripts/validate_dataset.py" ]; then
          echo "🔍 Running comprehensive validation..."
          if python scripts/validate_dataset.py "$DATASET_FILE" --output-json "pre_training_validation.json"; then
            echo "✅ Dataset validation passed!"
          else
            echo "❌ Dataset validation failed!"
            exit 1
          fi
        fi

    - name: 🤖 Run Incremental Fine-tuning
      id: training
      run: |
        set -euo pipefail
        
        echo "🚀 Starting INCREMENTAL FinBERT fine-tuning..."
        echo "📋 Configuration:"
        echo "  Dataset: $DATASET"
        echo "  Target Model: $TARGET_MODEL"
        echo "  Training Mode: $TRAINING_MODE"
        echo "  Push to Hub: $PUSH_TO_HUB"
        echo "  Epochs: $EPOCHS"
        echo "  Learning Rate: $LEARNING_RATE"
        echo "  Force Update: $FORCE_UPDATE"
        
        # Output directory local (toujours local pour les artifacts)
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        LOCAL_OUTPUT_DIR="models/incremental_${TRAINING_MODE}_${TIMESTAMP}"
        mkdir -p "$LOCAL_OUTPUT_DIR"
        echo "📁 Local output directory: $LOCAL_OUTPUT_DIR"
        
        # Construire les arguments pour le script de fine-tuning
        ARGS="--dataset datasets/$DATASET --output_dir $LOCAL_OUTPUT_DIR --epochs $EPOCHS --lr $LEARNING_RATE"
        
        # Mode incrémental : partir du modèle existant
        if [ "$TRAINING_MODE" = "incremental" ]; then
          # Vérifier si le modèle de production existe
          echo "🔄 Checking for existing production model..."
          if huggingface-cli repo info "$TARGET_MODEL" >/dev/null 2>&1; then
            echo "✅ Found existing model: $TARGET_MODEL"
            ARGS="$ARGS --model_name $TARGET_MODEL --incremental --baseline-model $TARGET_MODEL"
          else
            echo "⚠️ Production model not found, starting from base model"
            ARGS="$ARGS --model_name $FALLBACK_MODEL"
          fi
        else
          # Mode fresh : repartir du modèle de base
          echo "🆕 Starting fresh from base model: $FALLBACK_MODEL"
          ARGS="$ARGS --model_name $FALLBACK_MODEL"
        fi
        
        # Options pour mise à jour automatique
        if [ "$PUSH_TO_HUB" = "true" ]; then
          ARGS="$ARGS --push --hub_id $TARGET_MODEL"
          echo "🚀 Will push to HuggingFace Hub as: $TARGET_MODEL"
        fi
        
        if [ "$FORCE_UPDATE" = "true" ]; then
          ARGS="$ARGS --force-update"
          echo "⚡ Force update enabled"
        fi
        
        echo "🔥 Launching incremental training with args: $ARGS"
        
        # Exécuter le fine-tuning incrémental
        if python scripts/finetune.py $ARGS; then
          echo "✅ Incremental training completed successfully!"
          
          # Vérifier le rapport d'entraînement
          if [ -f "$LOCAL_OUTPUT_DIR/incremental_training_report.json" ]; then
            echo "📊 Incremental training report found"
            
            # Extraire les informations importantes
            REPORT="$LOCAL_OUTPUT_DIR/incremental_training_report.json"
            MODEL_UPDATED=$(cat "$REPORT" | jq -r '.model_updated // false')
            BASELINE_ACC=$(cat "$REPORT" | jq -r '.baseline_metrics.accuracy // 0')
            NEW_ACC=$(cat "$REPORT" | jq -r '.new_metrics.accuracy // 0')
            
            echo "📈 Training results:"
            echo "  Baseline accuracy: $BASELINE_ACC"
            echo "  New accuracy: $NEW_ACC"
            echo "  Model updated: $MODEL_UPDATED"
            
            # Outputs pour les étapes suivantes
            echo "model-updated=$MODEL_UPDATED" >> $GITHUB_OUTPUT
            echo "training-metrics={\"baseline_accuracy\":$BASELINE_ACC,\"new_accuracy\":$NEW_ACC,\"model_updated\":$MODEL_UPDATED}" >> $GITHUB_OUTPUT
            
            if [ "$MODEL_UPDATED" = "true" ]; then
              echo "🎉 Model was improved and updated on HuggingFace!"
              echo "final-model-id=$TARGET_MODEL" >> $GITHUB_OUTPUT
            else
              echo "📊 Model was not updated (no significant improvement)"
              echo "final-model-id=" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No incremental training report found"
            echo "model-updated=false" >> $GITHUB_OUTPUT
            echo "training-metrics={}" >> $GITHUB_OUTPUT
            echo "final-model-id=" >> $GITHUB_OUTPUT
          fi
          
          # Output du chemin local pour les artifacts
          echo "model-path=$LOCAL_OUTPUT_DIR" >> $GITHUB_OUTPUT
          
        else
          echo "❌ Incremental training failed"
          exit 1
        fi

    - name: 🏷️ Create Version Tag
      if: success() && steps.training.outputs.model-updated == 'true'
      run: |
        set -euo pipefail
        
        # Tag avec numéro de version incrémental
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        TAG_NAME="prod-model-v${TIMESTAMP}"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        TAG_MESSAGE="🚀 Production Model Updated: $TARGET_MODEL

        📊 Incremental Training Results:
        - Dataset: $DATASET
        - Training Mode: $TRAINING_MODE
        - Baseline Accuracy: $(echo '${{ steps.training.outputs.training-metrics }}' | jq -r '.baseline_accuracy // "N/A"')
        - New Accuracy: $(echo '${{ steps.training.outputs.training-metrics }}' | jq -r '.new_accuracy // "N/A"')
        - Improvement: $(echo '${{ steps.training.outputs.training-metrics }}' | jq -r '.model_updated // false')
        - Timestamp: $TIMESTAMP
        - Commit: ${{ github.sha }}

        🔗 Model: https://huggingface.co/$TARGET_MODEL
        🤖 Generated by TradePulse ML Incremental Pipeline"
        
        git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
        git push origin "$TAG_NAME"
        
        echo "✅ Created version tag: $TAG_NAME"

    - name: 📊 Final Summary
      if: always()
      run: |
        set -euo pipefail
        
        echo "📊 TradePulse ML - Incremental Training Summary"
        echo "=============================================="
        echo "🕐 Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "🎯 Trigger: ${{ needs.check-prerequisites.outputs.trigger-reason }}"
        echo "🎯 Training Mode: $TRAINING_MODE"
        echo "📦 Target Model: $TARGET_MODEL"
        echo "📊 Dataset: $DATASET"
        echo ""
        
        if [ -f "models/incremental_*/incremental_training_report.json" ]; then
          echo "📈 Training Results:"
          LATEST_REPORT=$(find models/ -name "incremental_training_report.json" -exec ls -t {} + | head -1)
          cat "$LATEST_REPORT" | jq '.' || cat "$LATEST_REPORT"
        else
          echo "⚠️ No incremental training report found"
        fi
        
        echo ""
        echo "🎯 Model Status:"
        if [ "${{ steps.training.outputs.model-updated }}" = "true" ]; then
          echo "  ✅ Model was IMPROVED and UPDATED"
          echo "  🔗 Production Model: https://huggingface.co/$TARGET_MODEL"
          echo "  🚀 Ready for use in TradePulse application!"
        else
          echo "  📊 Model was NOT updated (no significant improvement)"
          echo "  💡 Consider collecting more diverse training data"
        fi
        
        echo ""
        echo "🔄 Next Steps:"
        echo "  1. Test the updated model in your TradePulse application"
        echo "  2. Monitor performance on real financial data"
        echo "  3. Collect feedback for future improvements"

    - name: 📤 Upload Training Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: incremental-training-${{ github.run_id }}
        path: |
          models/incremental_*/**
          pre_training_validation.json
          finetune.log
        retention-days: 30

    - name: 🎉 Success Notification
      if: success()
      run: |
        echo "✅ TradePulse ML Incremental Pipeline completed!"
        echo ""
        echo "🎯 Key Results:"
        echo "  Target Model: $TARGET_MODEL"
        echo "  Training Mode: $TRAINING_MODE"
        echo "  Model Updated: ${{ steps.training.outputs.model-updated }}"
        echo ""
        
        if [ "${{ steps.training.outputs.model-updated }}" = "true" ]; then
          echo "🚀 SUCCESS: Your production model has been improved!"
          echo "   📎 Model URL: https://huggingface.co/$TARGET_MODEL"
          echo "   🔧 Update your TradePulse app to use this model"
          echo ""
          echo "💡 Integration in your app:"
          echo "   USE_CUSTOM_FINBERT = True"
          echo "   _FINBERT_MODEL = \"$TARGET_MODEL\""
        else
          echo "📊 INFO: Model was not updated (no significant improvement)"
          echo "   💡 Try collecting more diverse training data"
        fi
