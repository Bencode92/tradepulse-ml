name: üß™ Tests & Code Quality

on:
  # Tests sur toutes les PRs et pushs vers main
  push:
    branches: [main]
  pull_request:
    branches: [main]
  
  # Tests manuels
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type de tests √† ex√©cuter'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'validation-only'
          - 'linting-only'
          - 'security-only'

  # Tests programm√©s (daily)
  schedule:
    - cron: '0 6 * * *'  # 6h UTC tous les jours

jobs:
  # Job de tests unitaires
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas>=2.0.0 numpy>=1.24.0
        
        # Installer pytest si disponible pour tests plus avanc√©s
        pip install pytest pytest-cov pytest-xdist || echo "pytest optional"
        
        # Installer les d√©pendances du projet
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi

    - name: üß™ Run Dataset Validation Tests
      if: github.event.inputs.test_type != 'linting-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "üß™ Testing dataset validation script..."
        cd scripts
        
        # Tester avec ou sans pytest
        if command -v pytest &> /dev/null; then
          echo "üöÄ Using pytest for comprehensive testing"
          pytest test_validation.py -v --tb=short --cov=validate_dataset
        else
          echo "üîß Using manual test runner"
          python test_validation.py
        fi

    - name: üîç Test Validation on Sample Datasets
      if: github.event.inputs.test_type != 'linting-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "üîç Testing validation on actual datasets..."
        
        # Tester sur les datasets existants
        for dataset in datasets/*.csv; do
          if [ -f "$dataset" ]; then
            echo "Testing $dataset..."
            python scripts/validate_dataset.py "$dataset" --quiet || {
              echo "‚ö†Ô∏è Validation failed for $dataset (might be expected for test datasets)"
            }
          fi
        done
        
        # Test avec dataset invalide volontaire
        echo "text,label" > test_invalid.csv
        echo '"Test text",invalid_label' >> test_invalid.csv
        
        if python scripts/validate_dataset.py test_invalid.csv --quiet; then
          echo "‚ùå Validation should have failed for invalid dataset"
          exit 1
        else
          echo "‚úÖ Validation correctly failed for invalid dataset"
        fi
        
        rm -f test_invalid.csv

    - name: üß™ Test Fine-tuning Script Imports
      if: github.event.inputs.test_type != 'linting-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "üß™ Testing fine-tuning script imports..."
        python -c "
        import sys
        sys.path.append('scripts')
        try:
            import finetune
            print('‚úÖ Fine-tuning script imports OK')
        except ImportError as e:
            print(f'‚ö†Ô∏è Fine-tuning import issue (expected in CI): {e}')
        except Exception as e:
            print(f'‚ùå Unexpected error: {e}')
            sys.exit(1)
        "

  # Job de qualit√© du code (linting)
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: üì¶ Install Linting Tools
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'security-only'
      run: |
        pip install --upgrade pip
        # isort retir√© ; on garde seulement Ruff
        pip install "ruff==0.3.4" pre-commit

    - name: üîç Show Tool Versions
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "üîç Tool versions for debugging:"
        python -m ruff --version

    - name: ‚ö° Run Ruff Linting
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "‚ö° Running Ruff linting..."
        ruff check scripts/ --show-source || {
          echo "‚ùå Linting issues found"
          echo "üí° Run: ruff check scripts/ --fix"
          exit 1
        }

    - name: üé£ Test Pre-commit Hooks
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'security-only'
      run: |
        echo "üé£ Testing pre-commit configuration..."
        
        # Installer et tester pre-commit
        pre-commit install
        
        # Tester les hooks sur quelques fichiers
        pre-commit run --files scripts/validate_dataset.py || {
          echo "‚ö†Ô∏è Pre-commit hooks found issues (might be fixable)"
        }
        
        echo "‚úÖ Pre-commit configuration tested"

  # Job de s√©curit√©
  security-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üîê Check for Exposed Secrets
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'linting-only'
      run: |
        echo "üîê Checking for exposed secrets..."
        
        # Patterns de secrets courants
        SECRET_PATTERNS=(
          "api_key\s*=\s*[\"'][^\"']+[\"']"
          "secret\s*=\s*[\"'][^\"']+[\"']"
          "token\s*=\s*[\"'][^\"']+[\"']"
          "password\s*=\s*[\"'][^\"']+[\"']"
          "sk-[a-zA-Z0-9]{48}"  # OpenAI API keys
          "hf_[a-zA-Z0-9]{37}"  # HuggingFace tokens
        )
        
        SECRETS_FOUND=false
        
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -r -E "$pattern" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" . | grep -v ".git"; then
            echo "‚ùå Potential secret found matching pattern: $pattern"
            SECRETS_FOUND=true
          fi
        done
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "üö® Secrets or tokens detected in code!"
          echo "üí° Use environment variables or GitHub Secrets instead"
          exit 1
        else
          echo "‚úÖ No exposed secrets found"
        fi

    - name: üîç Check File Permissions
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'linting-only'
      run: |
        echo "üîç Checking file permissions..."
        
        # V√©rifier les permissions des scripts
        if [ -f "scripts/validate_dataset.py" ] && [ ! -x "scripts/validate_dataset.py" ]; then
          echo "‚ö†Ô∏è validate_dataset.py should be executable"
        fi
        
        if [ -f "scripts/finetune.py" ] && [ ! -x "scripts/finetune.py" ]; then
          echo "‚ö†Ô∏è finetune.py should be executable"
        fi
        
        echo "‚úÖ File permissions checked"

    - name: üìè Check File Sizes
      if: github.event.inputs.test_type != 'validation-only' && github.event.inputs.test_type != 'linting-only'
      run: |
        echo "üìè Checking for large files..."
        
        # Chercher les gros fichiers (>10MB)
        find . -type f -size +10M | grep -v .git | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "‚ö†Ô∏è Large file detected: $file ($size)"
          
          # Bloquer si c'est un mod√®le sans LFS
          if [[ "$file" =~ \.(bin|pt|pth|safetensors)$ ]]; then
            echo "‚ùå Model file should use Git LFS: $file"
            exit 1
          fi
        done || exit 1
        
        echo "‚úÖ File sizes OK"

  # Job de validation des workflows
  workflow-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üîç Validate GitHub Actions Workflows
      run: |
        echo "üîç Validating GitHub Actions workflows..."
        
        # V√©rifier la syntaxe YAML
        for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
          if [ -f "$workflow" ]; then
            echo "Validating $workflow..."
            python -c "
        import yaml
        import sys
        try:
            with open('$workflow', 'r') as f:
                yaml.safe_load(f)
            print('‚úÖ $workflow syntax OK')
        except Exception as e:
            print(f'‚ùå $workflow syntax error: {e}')
            sys.exit(1)
            " || exit 1
          fi
        done

    - name: üìã Check Workflow Dependencies
      run: |
        echo "üìã Checking workflow dependencies..."
        
        # V√©rifier que les workflows r√©f√©rencent des actions existantes
        for workflow in .github/workflows/*.yml; do
          if [ -f "$workflow" ]; then
            echo "Checking dependencies in $workflow..."
            
            # V√©rifier les versions d'actions couramment utilis√©es
            if grep -q "actions/checkout@v3" "$workflow"; then
              echo "‚ö†Ô∏è $workflow uses old checkout@v3, consider updating to v4"
            fi
            
            if grep -q "actions/setup-python@v3" "$workflow"; then
              echo "‚ö†Ô∏è $workflow uses old setup-python@v3, consider updating to v4"
            fi
          fi
        done
        
        echo "‚úÖ Workflow dependencies checked"

  # Job de synth√®se
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality, security-checks, workflow-validation]
    if: always()
    
    steps:
    - name: üìä Test Summary
      run: |
        echo "üìä Test Summary Report"
        echo "====================="
        echo ""
        
        # Statuts des jobs
        echo "üß™ Unit Tests: ${{ needs.unit-tests.result }}"
        echo "üîç Code Quality: ${{ needs.code-quality.result }}"
        echo "üîê Security Checks: ${{ needs.security-checks.result }}"
        echo "‚öôÔ∏è Workflow Validation: ${{ needs.workflow-validation.result }}"
        echo ""
        
        # D√©terminer le statut global
        if [ "${{ needs.unit-tests.result }}" = "success" ] && \
           [ "${{ needs.code-quality.result }}" = "success" ] && \
           [ "${{ needs.security-checks.result }}" = "success" ] && \
           [ "${{ needs.workflow-validation.result }}" = "success" ]; then
          echo "‚úÖ All tests passed! üéâ"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Some tests failed"
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
        
        echo ""
        echo "üîó View detailed results in the Actions tab"

    - name: üéâ Success Notification
      if: needs.unit-tests.result == 'success' && needs.code-quality.result == 'success' && needs.security-checks.result == 'success'
      run: |
        echo "üéâ All quality checks passed!"
        echo "‚úÖ Code ready for production"
        echo "üöÄ Ready to merge or deploy"
