name: 📰 Daily News Dataset Collection

on:
  # Collecte quotidienne à 06:00 UTC (08:00 CET)
  schedule:
    - cron: '0 6 * * *'
  
  # Collecte manuelle
  workflow_dispatch:
    inputs:
      source:
        description: 'Source de données'
        required: true
        default: 'fmp'
        type: choice
        options:
          - 'fmp'
          - 'placeholder'
      
      count:
        description: "Nombre d'échantillons à collecter"
        required: true
        default: '40'
        type: string
      
      days:
        description: 'Fenêtre temporelle en jours'
        required: true
        default: '7'
        type: string
      
      force_commit:
        description: 'Forcer le commit même si aucun changement'
        required: false
        default: false
        type: boolean
      
      include_time:
        description: 'Inclure heure dans le nom de fichier'
        required: false
        default: false
        type: boolean

jobs:
  collect-and-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Permissions explicites pour écriture
    permissions:
      contents: write
      issues: write
    
    outputs:
      dataset-created: ${{ steps.collect.outputs.dataset-created }}
      dataset-path: ${{ steps.collect.outputs.dataset-path }}
      sample-count: ${{ steps.collect.outputs.sample-count }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Dépendances de base
        pip install pandas>=2.0.0 requests
        
        # Dépendances pour ML
        pip install transformers torch || echo "ML dependencies failed, will use basic labeling"
        
        echo "✅ Dependencies installed"

    - name: 🔧 Set Environment Variables with Timezone
      run: |
        # Configurer le timezone Europe/Paris
        export TZ="Europe/Paris"
        
        # Déterminer les paramètres selon le mode de déclenchement
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "SOURCE=${{ github.event.inputs.source }}" >> $GITHUB_ENV
          echo "COUNT=${{ github.event.inputs.count }}" >> $GITHUB_ENV
          echo "DAYS=${{ github.event.inputs.days }}" >> $GITHUB_ENV
          echo "FORCE_COMMIT=${{ github.event.inputs.force_commit }}" >> $GITHUB_ENV
          echo "INCLUDE_TIME=${{ github.event.inputs.include_time }}" >> $GITHUB_ENV
        else
          # Déclenchement automatique (cron) - FMP par défaut
          echo "SOURCE=fmp" >> $GITHUB_ENV
          echo "COUNT=40" >> $GITHUB_ENV
          echo "DAYS=7" >> $GITHUB_ENV
          echo "FORCE_COMMIT=false" >> $GITHUB_ENV
          echo "INCLUDE_TIME=false" >> $GITHUB_ENV
        fi
        
        # Générer le nom de fichier avec la bonne timezone
        if [ "$INCLUDE_TIME" = "true" ]; then
          DATASET_SUFFIX=$(TZ="Europe/Paris" date '+%Y%m%d_%H%M')
        else
          DATASET_SUFFIX=$(TZ="Europe/Paris" date '+%Y%m%d')
        fi
        
        echo "DATASET_SUFFIX=$DATASET_SUFFIX" >> $GITHUB_ENV
        echo "TZ=Europe/Paris" >> $GITHUB_ENV
        
        echo "🔧 Configuration set:"
        echo "  Timezone: Europe/Paris"
        echo "  Current time: $(TZ='Europe/Paris' date)"
        echo "  Dataset suffix: $DATASET_SUFFIX"
        echo "  Source: $SOURCE"
        echo "  Count: $COUNT" 
        echo "  Days: $DAYS"

    - name: 📰 Collect News Dataset with Custom ML Model
      id: collect
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        set -euo pipefail
        
        echo "📰 Collecte FMP + Custom ML Labeling..."
        echo "🔧 Paramètres: Source=$SOURCE, Count=$COUNT, Days=$DAYS"
        echo "🕐 Timezone: $TZ ($(date))"
        
        # Utiliser le suffixe généré pour le nom de fichier
        DATASET_FILE="datasets/news_${DATASET_SUFFIX}.csv"
        
        # Collecte FMP avec VOTRE modèle ML
        if [ "$SOURCE" = "fmp" ]; then
          echo "🤖 ML Labeling avec VOTRE modèle custom activé"
          EXTRA_ARGS="--auto-label --ml-model production --confidence-threshold 0.75"
        else
          echo "📝 Mode placeholder (test)"
          EXTRA_ARGS=""
        fi
        
        # Collecte avec FMP API
        if python scripts/collect_news.py \
            --source "$SOURCE" \
            --count "$COUNT" \
            --days "$DAYS" \
            --output "$DATASET_FILE" \
            $EXTRA_ARGS; then
          
          echo "✅ Collecte FMP + Custom ML réussie"
          echo "📁 Fichier cible: $DATASET_FILE"
          
          if [ -f "$DATASET_FILE" ]; then
            SAMPLE_COUNT=$(tail -n +2 "$DATASET_FILE" | wc -l)
            echo "📊 Dataset créé: $DATASET_FILE ($SAMPLE_COUNT échantillons)"
            
            # Vérifier les métadonnées JSON
            JSON_FILE="${DATASET_FILE%.csv}.json"
            if [ -f "$JSON_FILE" ]; then
              echo "📁 Métadonnées FMP créées: $JSON_FILE"
              
              if command -v jq >/dev/null 2>&1; then
                echo "🤖 Informations Custom ML:"
                jq -r 'if .auto_labeling_enabled then "  ML activé: " + (.ml_model_used // "N/A") else "  ML désactivé" end' "$JSON_FILE" 2>/dev/null || echo "  (infos ML non disponibles)"
                
                echo "📊 Distribution avec Custom ML:"
                jq -r '.label_distribution | to_entries[] | "  " + .key + ": " + (.value | tostring)' "$JSON_FILE" 2>/dev/null || echo "  (distribution non disponible)"
                
                echo "🎯 Confiance Custom ML:"
                jq -r '"  Articles haute confiance: " + (.high_confidence_articles // 0 | tostring) + "/" + (.article_count // 0 | tostring)' "$JSON_FILE" 2>/dev/null || echo "  (confiance non disponible)"
              fi
            fi
            
            echo "dataset-created=true" >> $GITHUB_OUTPUT
            echo "dataset-path=$DATASET_FILE" >> $GITHUB_OUTPUT
            echo "sample-count=$SAMPLE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "❌ Dataset non trouvé après collecte: $DATASET_FILE"
            exit 1
          fi
        else
          echo "❌ Échec de la collecte FMP"
          echo "💡 Solutions possibles:"
          echo "  - Vérifier FMP_API_KEY dans les secrets"
          echo "  - Vérifier HF_TOKEN pour votre modèle custom"
          echo "  - Vérifier la connexion internet"
          echo "  - Tester avec 'placeholder' si FMP échoue"
          echo "  - Installer les dépendances ML: pip install transformers torch"
          exit 1
        fi

    - name: 🔍 Validate Dataset Quality
      if: steps.collect.outputs.dataset-created == 'true'
      run: |
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        
        echo "🔍 Validation du dataset: $DATASET_PATH"
        
        # Utiliser notre script de validation si disponible
        if [ -f "scripts/validate_dataset.py" ]; then
          if python scripts/validate_dataset.py "$DATASET_PATH"; then
            echo "✅ Validation réussie"
          else
            echo "❌ Dataset invalide - arrêt du processus"
            exit 1
          fi
        else
          echo "⚠️ Script de validation non trouvé, validation basique..."
          
          # Validation basique
          if [ ! -s "$DATASET_PATH" ]; then
            echo "❌ Dataset vide"
            exit 1
          fi
          
          # Vérifier l'en-tête
          if ! head -1 "$DATASET_PATH" | grep -q "text,label"; then
            echo "❌ En-tête CSV incorrect"
            exit 1
          fi
          
          echo "✅ Validation basique OK"
        fi

    - name: 📊 Dataset Statistics Custom ML
      if: steps.collect.outputs.dataset-created == 'true'
      run: |
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        
        echo "📊 Statistiques dataset avec Custom ML:"
        echo "====================================="
        
        # Statistiques CSV basiques
        TOTAL_LINES=$(wc -l < "$DATASET_PATH")
        DATA_LINES=$((TOTAL_LINES - 1))
        
        echo "📄 Fichier: $DATASET_PATH"
        echo "📊 Échantillons: $DATA_LINES"
        echo "💾 Taille: $(du -h "$DATASET_PATH" | cut -f1)"
        echo "🕐 Créé: $(TZ='Europe/Paris' date)"
        echo "🏭 Source: FMP API + Custom ML ($DAYS jours)"
        
        # Cache déduplication
        CACHE_FILE="datasets/.article_cache.json"
        if [ -f "$CACHE_FILE" ]; then
          if command -v jq >/dev/null 2>&1; then
            CACHE_SIZE=$(jq '.articles | length' "$CACHE_FILE" 2>/dev/null || echo "?")
            echo "🗄️ Cache déduplication: $CACHE_SIZE articles connus"
          else
            echo "🗄️ Cache déduplication: présent"
          fi
        fi
        
        # Distribution des labels
        echo ""
        echo "🏷️ Distribution avec Custom ML:"
        tail -n +2 "$DATASET_PATH" | cut -d',' -f2 | sort | uniq -c | while read count label; do
          if command -v bc >/dev/null 2>&1; then
            percentage=$(echo "scale=1; $count * 100 / $DATA_LINES" | bc -l)
            echo "  $label: $count ($percentage%)"
          else
            echo "  $label: $count"
          fi
        done
        
        # Aperçu du contenu
        echo ""
        echo "👀 Aperçu contenu Custom ML:"
        tail -n +2 "$DATASET_PATH" | head -3

    - name: 📝 Smart Commit and Push
      if: steps.collect.outputs.dataset-created == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        
        # Configuration Git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        SAMPLE_COUNT="${{ steps.collect.outputs.sample-count }}"
        TODAY=$(TZ='Europe/Paris' date '+%Y-%m-%d')
        FULL_TIMESTAMP=$(TZ='Europe/Paris' date '+%Y-%m-%d %H:%M:%S %Z')
        
        # Ajouter les fichiers
        echo "🔧 Executing: git add $DATASET_PATH"
        git add "$DATASET_PATH"
        
        # Ajouter le cache si présent
        if [ -f "datasets/.article_cache.json" ]; then
          git add datasets/.article_cache.json
          echo "🗄️ Cache de déduplication ajouté"
        fi
        
        # Vérifier changements
        HAS_CHANGES=false
        if ! git diff --staged --quiet; then
          HAS_CHANGES=true
          echo "✅ Changements détectés"
        else
          echo "⚠️ Aucun changement détecté"
        fi
        
        # Commit selon la logique
        if [ "$HAS_CHANGES" = "true" ]; then
          COMMIT_MSG=$(cat <<EOF
        📰 Add FMP dataset with Custom ML labeling ($TODAY)

        📊 Dataset details:
        - File: $DATASET_PATH
        - Samples: $SAMPLE_COUNT
        - Source: FMP API + Bencode92/tradepulse-finbert-prod
        - Generated: $FULL_TIMESTAMP
        - ML Labeling: ✅ Custom Model (production)

        🚀 This dataset will improve the custom model via fine-tuning
        🤖 Auto-generated by FMP + Custom ML workflow
        EOF
        )
          
          git commit -m "$COMMIT_MSG"
          echo "✅ Commit effectué avec changements"
          
        elif [ "$FORCE_COMMIT" = "true" ]; then
          COMMIT_MSG="🔄 Forced Custom ML dataset update ($TODAY)"
          git commit -m "$COMMIT_MSG" --allow-empty
          echo "🔄 Commit forcé effectué"
          
        else
          echo "🔄 Pas de changements → skip commit"
          echo "✅ Workflow terminé avec succès"
          exit 0
        fi
        
        # Push avec authentification
        echo "🔧 Configuration de l'authentification Git..."
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"
        
        echo "🚀 Pushing to repository..."
        git push
        
        echo "✅ Custom ML dataset committed and pushed successfully"
        echo "🔄 This will trigger fine-tuning to improve your custom model"

    - name: 📝 Create Summary Comment (Custom ML)
      if: always() && github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const datasetCreated = '${{ steps.collect.outputs.dataset-created }}' === 'true';
          const datasetPath = '${{ steps.collect.outputs.dataset-path }}';
          const sampleCount = '${{ steps.collect.outputs.sample-count }}';
          const source = '${{ env.SOURCE }}';
          const days = '${{ env.DAYS }}';
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          
          let emoji, statusText, message;
          
          if (status === 'success' && datasetCreated) {
            emoji = '✅';
            statusText = 'SUCCESS';
            
            message = `🎉 Dataset créé avec VOTRE modèle ML custom !
            
            **📊 Détails du dataset:**
            - 📄 Fichier: \`${datasetPath}\`
            - 📊 Échantillons: ${sampleCount}
            - 🏭 Source: FMP API + Custom ML
            - 🤖 Modèle: Bencode92/tradepulse-finbert-prod
            - 📅 Fenêtre: ${days} jours
            - 🕐 Timezone: Europe/Paris
            
            **🔥 Votre modèle custom en action:**
            - ✅ Utilise VOTRE modèle entraîné
            - ✅ Analyse sentiment avec vos données
            - ✅ S'améliore à chaque commit
            - ✅ Cycle d'apprentissage continu
            
            **🔄 Prochaines étapes automatiques:**
            1. 🔍 Validation qualité
            2. 🤖 Fine-tuning de VOTRE modèle
            3. 🚀 Mise à jour sur HuggingFace
            4. 🔄 Prêt pour prochaine collecte`;
          } else {
            emoji = '❌';
            statusText = 'FAILED';
            message = `🚨 Échec de la collecte avec Custom ML.
            
            **⚠️ Problème détecté:**
            - Status: ${status}
            - Dataset créé: ${datasetCreated}
            
            **🔧 Actions suggérées:**
            1. Vérifier FMP_API_KEY et HF_TOKEN dans les secrets
            2. Tester localement: \`python scripts/collect_news.py --source fmp --ml-model production\`
            3. Vérifier accès au modèle: Bencode92/tradepulse-finbert-prod
            4. Test fallback: \`python scripts/collect_news.py --source fmp --ml-model fallback\``;
          }
          
          const commentBody = `## ${emoji} Custom ML Collection - ${statusText}
          
          ${message}
          
          ### 🔗 Liens utiles
          - 📊 [Workflow complet](${runUrl})
          - 🤖 [Votre modèle](https://huggingface.co/Bencode92/tradepulse-finbert-prod)
          - 🏭 Script: \`scripts/collect_news.py\` (Custom ML)
          
          ---
          *🤖 Collecte avec VOTRE modèle Bencode92/tradepulse-finbert-prod*
          `;
          
          console.log('Workflow summary:', commentBody);

  # Job optionnel pour notifier en cas d'échec
  notify-failure:
    runs-on: ubuntu-latest
    needs: collect-and-commit
    if: failure() && github.event_name == 'schedule'
    
    permissions:
      issues: write
    
    steps:
    - name: 🚨 Notify Collection Failure
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `# 🚨 Échec collecte Custom ML quotidienne

          La collecte automatique avec votre modèle custom du ${new Date().toISOString().split('T')[0]} a échoué.

          ## 📊 Détails
          - **Workflow:** Custom ML Collection (Bencode92/tradepulse-finbert-prod)
          - **Source:** FMP API + Custom Model
          - **Trigger:** Scheduled (cron)
          - **Timestamp:** ${new Date().toISOString()}

          ## 🔧 Actions suggérées
          1. Vérifier FMP_API_KEY et HF_TOKEN dans les secrets
          2. Tester votre modèle: \`python scripts/collect_news.py --source fmp --ml-model production\`
          3. Vérifier accès Bencode92/tradepulse-finbert-prod
          4. Test fallback: \`--ml-model fallback\`

          ---
          *Issue automatique Custom ML*
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Échec Custom ML ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['bug', 'automation', 'custom-ml']
          });
