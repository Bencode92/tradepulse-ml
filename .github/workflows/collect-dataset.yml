name: üì∞ Daily News Dataset Collection

on:
  # Collecte quotidienne √† 06:00 UTC (08:00 CET)
  schedule:
    - cron: '0 6 * * *'
  
  # Collecte manuelle
  workflow_dispatch:
    inputs:
      source:
        description: 'Source de donn√©es'
        required: true
        default: 'fmp'
        type: choice
        options:
          - 'fmp'
          - 'placeholder'
      
      count:
        description: "Nombre d'√©chantillons √† collecter"
        required: true
        default: '40'
        type: string
      
      days:
        description: 'Fen√™tre temporelle en jours'
        required: true
        default: '7'
        type: string
      
      force_commit:
        description: 'Forcer le commit m√™me si aucun changement'
        required: false
        default: false
        type: boolean
      
      include_time:
        description: 'Inclure heure dans le nom de fichier'
        required: false
        default: false
        type: boolean

jobs:
  collect-and-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    # Permissions explicites pour √©criture
    permissions:
      contents: write
      issues: write
    
    outputs:
      dataset-created: ${{ steps.collect.outputs.dataset-created }}
      dataset-path: ${{ steps.collect.outputs.dataset-path }}
      sample-count: ${{ steps.collect.outputs.sample-count }}
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        
        # D√©pendances de base
        pip install pandas>=2.0.0 requests
        
        # D√©pendances pour ML
        pip install transformers torch || echo "ML dependencies failed, will use basic labeling"
        
        echo "‚úÖ Dependencies installed"

    - name: üîß Set Environment Variables with Timezone
      run: |
        # Configurer le timezone Europe/Paris
        export TZ="Europe/Paris"
        
        # D√©terminer les param√®tres selon le mode de d√©clenchement
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "SOURCE=${{ github.event.inputs.source }}" >> $GITHUB_ENV
          echo "COUNT=${{ github.event.inputs.count }}" >> $GITHUB_ENV
          echo "DAYS=${{ github.event.inputs.days }}" >> $GITHUB_ENV
          echo "FORCE_COMMIT=${{ github.event.inputs.force_commit }}" >> $GITHUB_ENV
          echo "INCLUDE_TIME=${{ github.event.inputs.include_time }}" >> $GITHUB_ENV
        else
          # D√©clenchement automatique (cron) - FMP par d√©faut
          echo "SOURCE=fmp" >> $GITHUB_ENV
          echo "COUNT=40" >> $GITHUB_ENV
          echo "DAYS=7" >> $GITHUB_ENV
          echo "FORCE_COMMIT=false" >> $GITHUB_ENV
          echo "INCLUDE_TIME=false" >> $GITHUB_ENV
        fi
        
        # G√©n√©rer le nom de fichier avec la bonne timezone
        if [ "$INCLUDE_TIME" = "true" ]; then
          DATASET_SUFFIX=$(TZ="Europe/Paris" date '+%Y%m%d_%H%M')
        else
          DATASET_SUFFIX=$(TZ="Europe/Paris" date '+%Y%m%d')
        fi
        
        echo "DATASET_SUFFIX=$DATASET_SUFFIX" >> $GITHUB_ENV
        echo "TZ=Europe/Paris" >> $GITHUB_ENV
        
        echo "üîß Configuration set:"
        echo "  Timezone: Europe/Paris"
        echo "  Current time: $(TZ='Europe/Paris' date)"
        echo "  Dataset suffix: $DATASET_SUFFIX"
        echo "  Source: $SOURCE"
        echo "  Count: $COUNT" 
        echo "  Days: $DAYS"

    - name: üì∞ Collect News Dataset with FMP API
      id: collect
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      run: |
        set -euo pipefail
        
        echo "üì∞ Collecte FMP + ML Labeling..."
        echo "üîß Param√®tres: Source=$SOURCE, Count=$COUNT, Days=$DAYS"
        echo "üïê Timezone: $TZ ($(date))"
        
        # Utiliser le suffixe g√©n√©r√© pour le nom de fichier
        DATASET_FILE="datasets/news_${DATASET_SUFFIX}.csv"
        
        # Collecte FMP avec ML automatique
        if [ "$SOURCE" = "fmp" ]; then
          echo "ü§ñ ML Labeling FMP automatique activ√©"
          EXTRA_ARGS="--auto-label --ml-model fallback --confidence-threshold 0.75"
        else
          echo "üìù Mode placeholder (test)"
          EXTRA_ARGS=""
        fi
        
        # Collecte avec FMP API
        if python scripts/collect_news.py \
            --source "$SOURCE" \
            --count "$COUNT" \
            --days "$DAYS" \
            --output "$DATASET_FILE" \
            $EXTRA_ARGS; then
          
          echo "‚úÖ Collecte FMP r√©ussie"
          echo "üìÅ Fichier cible: $DATASET_FILE"
          
          if [ -f "$DATASET_FILE" ]; then
            SAMPLE_COUNT=$(tail -n +2 "$DATASET_FILE" | wc -l)
            echo "üìä Dataset cr√©√©: $DATASET_FILE ($SAMPLE_COUNT √©chantillons)"
            
            # V√©rifier les m√©tadonn√©es JSON
            JSON_FILE="${DATASET_FILE%.csv}.json"
            if [ -f "$JSON_FILE" ]; then
              echo "üìÅ M√©tadonn√©es FMP cr√©√©es: $JSON_FILE"
              
              if command -v jq >/dev/null 2>&1; then
                echo "ü§ñ Informations ML:"
                jq -r 'if .auto_labeling_enabled then "  ML activ√©: " + (.ml_model_used // "N/A") else "  ML d√©sactiv√©" end' "$JSON_FILE" 2>/dev/null || echo "  (infos ML non disponibles)"
                
                echo "üìä Distribution FMP:"
                jq -r '.label_distribution | to_entries[] | "  " + .key + ": " + (.value | tostring)' "$JSON_FILE" 2>/dev/null || echo "  (distribution non disponible)"
              fi
            fi
            
            echo "dataset-created=true" >> $GITHUB_OUTPUT
            echo "dataset-path=$DATASET_FILE" >> $GITHUB_OUTPUT
            echo "sample-count=$SAMPLE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Dataset non trouv√© apr√®s collecte: $DATASET_FILE"
            exit 1
          fi
        else
          echo "‚ùå √âchec de la collecte FMP"
          echo "üí° Solutions possibles:"
          echo "  - V√©rifier FMP_API_KEY dans les secrets"
          echo "  - V√©rifier la connexion internet"
          echo "  - Tester avec 'placeholder' si FMP √©choue"
          echo "  - Installer les d√©pendances ML: pip install transformers torch"
          exit 1
        fi

    - name: üîç Validate Dataset Quality
      if: steps.collect.outputs.dataset-created == 'true'
      run: |
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        
        echo "üîç Validation du dataset: $DATASET_PATH"
        
        # Utiliser notre script de validation si disponible
        if [ -f "scripts/validate_dataset.py" ]; then
          if python scripts/validate_dataset.py "$DATASET_PATH"; then
            echo "‚úÖ Validation r√©ussie"
          else
            echo "‚ùå Dataset invalide - arr√™t du processus"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è Script de validation non trouv√©, validation basique..."
          
          # Validation basique
          if [ ! -s "$DATASET_PATH" ]; then
            echo "‚ùå Dataset vide"
            exit 1
          fi
          
          # V√©rifier l'en-t√™te
          if ! head -1 "$DATASET_PATH" | grep -q "text,label"; then
            echo "‚ùå En-t√™te CSV incorrect"
            exit 1
          fi
          
          echo "‚úÖ Validation basique OK"
        fi

    - name: üìä Dataset Statistics FMP
      if: steps.collect.outputs.dataset-created == 'true'
      run: |
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        
        echo "üìä Statistiques dataset FMP:"
        echo "=========================="
        
        # Statistiques CSV basiques
        TOTAL_LINES=$(wc -l < "$DATASET_PATH")
        DATA_LINES=$((TOTAL_LINES - 1))
        
        echo "üìÑ Fichier: $DATASET_PATH"
        echo "üìä √âchantillons: $DATA_LINES"
        echo "üíæ Taille: $(du -h "$DATASET_PATH" | cut -f1)"
        echo "üïê Cr√©√©: $(TZ='Europe/Paris' date)"
        echo "üè≠ Source: FMP API ($DAYS jours)"
        
        # Cache d√©duplication
        CACHE_FILE="datasets/.article_cache.json"
        if [ -f "$CACHE_FILE" ]; then
          if command -v jq >/dev/null 2>&1; then
            CACHE_SIZE=$(jq '.articles | length' "$CACHE_FILE" 2>/dev/null || echo "?")
            echo "üóÑÔ∏è Cache d√©duplication: $CACHE_SIZE articles connus"
          else
            echo "üóÑÔ∏è Cache d√©duplication: pr√©sent"
          fi
        fi
        
        # Distribution des labels
        echo ""
        echo "üè∑Ô∏è Distribution des labels FMP:"
        tail -n +2 "$DATASET_PATH" | cut -d',' -f2 | sort | uniq -c | while read count label; do
          if command -v bc >/dev/null 2>&1; then
            percentage=$(echo "scale=1; $count * 100 / $DATA_LINES" | bc -l)
            echo "  $label: $count ($percentage%)"
          else
            echo "  $label: $count"
          fi
        done
        
        # Aper√ßu du contenu
        echo ""
        echo "üëÄ Aper√ßu contenu FMP:"
        tail -n +2 "$DATASET_PATH" | head -3

    - name: üìù Smart Commit and Push
      if: steps.collect.outputs.dataset-created == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        
        # Configuration Git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        DATASET_PATH="${{ steps.collect.outputs.dataset-path }}"
        SAMPLE_COUNT="${{ steps.collect.outputs.sample-count }}"
        TODAY=$(TZ='Europe/Paris' date '+%Y-%m-%d')
        FULL_TIMESTAMP=$(TZ='Europe/Paris' date '+%Y-%m-%d %H:%M:%S %Z')
        
        # Ajouter les fichiers
        echo "üîß Executing: git add $DATASET_PATH"
        git add "$DATASET_PATH"
        
        # Ajouter le cache si pr√©sent
        if [ -f "datasets/.article_cache.json" ]; then
          git add datasets/.article_cache.json
          echo "üóÑÔ∏è Cache de d√©duplication ajout√©"
        fi
        
        # V√©rifier changements
        HAS_CHANGES=false
        if ! git diff --staged --quiet; then
          HAS_CHANGES=true
          echo "‚úÖ Changements d√©tect√©s"
        else
          echo "‚ö†Ô∏è Aucun changement d√©tect√©"
        fi
        
        # Commit selon la logique
        if [ "$HAS_CHANGES" = "true" ]; then
          COMMIT_MSG=$(cat <<EOF
        üì∞ Add FMP financial news dataset with ML labeling ($TODAY)

        üìä Dataset details:
        - File: $DATASET_PATH
        - Samples: $SAMPLE_COUNT
        - Source: FMP API (fen√™tre: $DAYS jours)
        - Generated: $FULL_TIMESTAMP
        - ML Labeling: ‚úÖ Enabled (FinBERT)

        ü§ñ Auto-generated by FMP News Collection workflow
        EOF
        )
          
          git commit -m "$COMMIT_MSG"
          echo "‚úÖ Commit effectu√© avec changements"
          
        elif [ "$FORCE_COMMIT" = "true" ]; then
          COMMIT_MSG="üîÑ Forced FMP dataset update ($TODAY)"
          git commit -m "$COMMIT_MSG" --allow-empty
          echo "üîÑ Commit forc√© effectu√©"
          
        else
          echo "üîÑ Pas de changements ‚Üí skip commit"
          echo "‚úÖ Workflow termin√© avec succ√®s"
          exit 0
        fi
        
        # Push avec authentification
        echo "üîß Configuration de l'authentification Git..."
        git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"
        
        echo "üöÄ Pushing to repository..."
        git push
        
        echo "‚úÖ Dataset FMP committed and pushed successfully"
        echo "üîÑ This will trigger validation and fine-tuning workflows"

    - name: üìù Create Summary Comment (FMP Edition)
      if: always() && github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const datasetCreated = '${{ steps.collect.outputs.dataset-created }}' === 'true';
          const datasetPath = '${{ steps.collect.outputs.dataset-path }}';
          const sampleCount = '${{ steps.collect.outputs.sample-count }}';
          const source = '${{ env.SOURCE }}';
          const days = '${{ env.DAYS }}';
          const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          
          let emoji, statusText, message;
          
          if (status === 'success' && datasetCreated) {
            emoji = '‚úÖ';
            statusText = 'SUCCESS';
            
            message = `üéâ Dataset FMP cr√©√© avec succ√®s + ML Labeling !
            
            **üìä D√©tails du dataset:**
            - üìÑ Fichier: \`${datasetPath}\`
            - üìä √âchantillons: ${sampleCount}
            - üè≠ Source: Financial Modeling Prep API
            - üìÖ Fen√™tre temporelle: ${days} jours
            - ü§ñ ML Labeling: ‚úÖ Activ√© (FinBERT)
            - üïê Timezone: Europe/Paris
            
            **üî• Avantages FMP:**
            - ‚úÖ Sources financi√®res premium (Bloomberg, Reuters, WSJ)
            - ‚úÖ 5 endpoints sp√©cialis√©s (stock, crypto, forex, etc.)
            - ‚úÖ Pagination intelligente par intervalles
            - ‚úÖ D√©duplication avanc√©e
            - ‚úÖ ML Labeling automatique
            
            **üîÑ Prochaines √©tapes:**
            1. üîç Validation automatique d√©clench√©e
            2. ü§ñ Fine-tuning si validation OK
            3. üöÄ Mod√®le disponible sur HuggingFace`;
          } else {
            emoji = '‚ùå';
            statusText = 'FAILED';
            message = `üö® √âchec de la collecte FMP.
            
            **‚ö†Ô∏è Probl√®me d√©tect√©:**
            - Status: ${status}
            - Dataset cr√©√©: ${datasetCreated}
            
            **üîß Actions sugg√©r√©es:**
            1. V√©rifier FMP_API_KEY dans les secrets
            2. Tester localement: \`python scripts/collect_news.py --source fmp --count 20\`
            3. V√©rifier d√©pendances: \`pip install requests transformers torch\`
            4. Test fallback: \`python scripts/collect_news.py --source placeholder\``;
          }
          
          const commentBody = `## ${emoji} FMP News Collection + ML Labeling - ${statusText}
          
          ${message}
          
          ### üîó Liens utiles
          - üìä [Workflow complet](${runUrl})
          - üè≠ Script FMP: \`scripts/collect_news.py\` (Financial Modeling Prep)
          - üìñ [Guide des datasets](DATASET_WORKFLOW.md)
          
          ---
          *ü§ñ Collecte FMP automatique avec ML Labeling FinBERT*
          `;
          
          console.log('Workflow summary:', commentBody);

  # Job optionnel pour notifier en cas d'√©chec
  notify-failure:
    runs-on: ubuntu-latest
    needs: collect-and-commit
    if: failure() && github.event_name == 'schedule'
    
    permissions:
      issues: write
    
    steps:
    - name: üö® Notify Collection Failure
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `# üö® √âchec de la collecte FMP quotidienne

          La collecte automatique FMP + ML du ${new Date().toISOString().split('T')[0]} a √©chou√©.

          ## üìä D√©tails
          - **Workflow:** FMP News Collection + ML Labeling
          - **Source:** Financial Modeling Prep API
          - **Trigger:** Scheduled (cron)
          - **Timestamp:** ${new Date().toISOString()}
          - **Run ID:** ${context.runId}

          ## üîó Liens
          - [Workflow failed](${context.payload.repository.html_url}/actions/runs/${context.runId})
          - [Script FMP](${context.payload.repository.html_url}/blob/main/scripts/collect_news.py)

          ## üîß Actions sugg√©r√©es
          1. V√©rifier FMP_API_KEY dans les secrets Actions
          2. Tester collecte FMP: \`python scripts/collect_news.py --source fmp --count 20\`
          3. V√©rifier d√©pendances ML: \`pip install transformers torch\`
          4. Test sans ML: \`python scripts/collect_news.py --source fmp --days 3\`
          5. V√©rifier endpoints FMP API

          ## ü§ñ Test FMP Local
          \`\`\`bash
          # Test complet avec ML
          export FMP_API_KEY="your_key"
          python scripts/collect_news.py --source fmp --count 20 --auto-label --ml-model fallback
          
          # Test simple sans ML
          python scripts/collect_news.py --source fmp --count 10 --days 3
          \`\`\`

          ---
          *Issue cr√©√©e automatiquement par le syst√®me de monitoring FMP*
          `;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® √âchec collecte FMP ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['bug', 'automation', 'fmp-collection', 'ml-labeling']
          });
